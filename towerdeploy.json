{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"_artifactsLocation": {
			"type": "string",
			"metadata": {
				"description": "Base URL for Template FIles",
				"artifactsBaseUrl": ""
			},
			"defaultValue": "https://raw.githubusercontent.com/mglantz/ansibletower-demo/master/"
		},
		"masterVmSize": {
			"type": "string",
			"defaultValue": "Standard_DS2_v2",
			"allowedValues": [
				"Standard_A4", "Standard_A5", "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
				"Standard_D2", "Standard_D3", "Standard_D4",
				"Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
				"Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2",
				"Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
				"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
				"Standard_DS2", "Standard_DS3", "Standard_DS4",
				"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
				"Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2",
				"Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2",
				"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5"
			],
			"metadata": {
				"description": "Tower Master VM size"
			}
		},
		"towerClusterPrefix": {
			"type": "string",
			"minLength": 1,
			"maxLength": 5,
			"metadata": {
				"description": "Tower cluster prefix.  Used to generate Tower hostnames.  Maximum of 5 characters."
			}
		},
		"towerMasterPublicIpDnsLabel": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Tower Master Load Balancer public IP DNS name (hostname portion). Must be lowercase. It should match with the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$ or it will raise an error."
			}
		},
		"masterInstanceCount": {
			"type": "int",
			"minValue": 1,
			"allowedValues": [1, 3],
			"metadata": {
				"description": "Number of Tower servers.  1 is non HA and 3 is for HA"
			}
		},
		"dataDiskSize": {
			"type": "int",
			"minValue": 1,
			"allowedValues": [1, 5, 10, 25, 50, 75, 100, 128, 256, 512, 768, 1023],
			"metadata": {
				"description": "Size of Datadisk in GB for extra data volume"
			}
		},
		"adminUsername": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Administrator username on all VMs and first user created for Tower login"
			}
		},
		"cloudAccessUsername": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Red Hat Cloud Access Username (login credentials for access.redhat.com)"
			}
		},
		"cloudAccessPassword": {
			"type": "securestring",
			"minLength": 1,
			"metadata": {
				"description": "Cloud Access password (login credentials for access.redhat.com)"
			}
		},
		"cloudAccessPoolId": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Pool ID with Tower entitlements"
			}
		},
		"sshPublicKey": {
			"type": "securestring",
			"metadata": {
				"description": "SSH public key for all VMs"
			}
		},
		"keyVaultResourceGroup": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Resource Group that contains the Key Vault"
			}
		},
		"keyVaultName": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Name of the Key Vault"
			}
		},
		"keyVaultSecret": {
			"type": "securestring",
			"minLength": 1,
			"metadata": {
				"description": "Key Vault Secret Name that contains the Private Key"
			}
		},
		"defaultSubDomainType": {
			"type": "string",
			"defaultValue": "xipio",
			"allowedValues": [
				"xipio", "custom"
			],
			"metadata": {
				"description": "Default Subdomain type - xip.io or custom (defined in next parameter)"
			}
		},
		"defaultSubDomain": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Default Subdomain for application routing (Wildcard DNS) - must enter something even if you are using xip.io"
			}
		}
	},
	"variables": {
		"location": "[resourceGroup().location]",
		"apiVersionCompute": "2015-06-15",
		"apiVersionNetwork": "2016-03-30",
		"apiVersionStorage": "2015-06-15",
		"apiVersionLinkTemplate": "2015-01-01",
		"namingInfix": "[toLower(parameters('towerClusterPrefix'))]",
		"towerMasterHostname": "[concat(variables('namingInfix'), 'm')]",
		"newStorageAccountMaster": "[concat(uniqueString(concat(resourceGroup().id, 'msa', '0')), 'msa')]",
		"addressPrefix": "192.168.0.0/16",
		"masterSubnetPrefix": "192.168.1.0/24",
		"virtualNetworkName": "towervnet",
		"masterSubnetName": "mastersubnet",
		"masterLoadBalancerName": "[concat(variables('towerMasterHostname'), 'lb')]",
		"masterPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('towerMasterPublicIpDnsLabel'))]",
		"masterLbId": "[resourceId('Microsoft.Network/loadBalancers', variables('masterLoadBalancerName'))]",
		"masterLbFrontEndConfigId": "[concat(variables('masterLbId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]",
		"masterLbBackendPoolId": "[concat(variables('masterLbId'),'/backendAddressPools/loadBalancerBackend')]",
		"masterLbHttpProbeId": "[concat(variables('masterLbId'),'/probes/httpProbe')]",
		"masterLb8443ProbeId": "[concat(variables('masterLbId'),'/probes/8443Probe')]",
		"masterLbCockpitProbeId": "[concat(variables('masterLbId'),'/probes/cockpitProbe')]",
		"osType": {
			"publisher": "RedHat",
			"offer": "RHEL",
			"sku": "7.3",
			"version": "latest"
		},
		"imageReference": "[variables('osType')]",
		"singlequote": "'",
		"sshKeyPath": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
		"towerPrepScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/towerPrep.sh')]",
		"towerPrepScriptFileName": "towerPrep.sh",
		"towerDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), 'nested/towerdeploy.json')]",
		"vmSizesMap": {
			"Standard_A4": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A5": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A6": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A7": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A8": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A9": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A10": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A11": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D1": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D3": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D4": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D11": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D12": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D13": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D14": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D1_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D2_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D3_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D4_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D5_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D11_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D12_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D13_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D14_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G1": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G3": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G4": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G5": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_DS1": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS3": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS4": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS11": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS12": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS13": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS14": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS1_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS2_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS3_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS4_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS5_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS11_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS12_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS13_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS14_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS15_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS1": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS3": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS4": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS5": {
				"storageAccountType": "Premium_LRS"
			}
		}
	},
	"resources": [

		{
			"apiVersion": "[variables('apiVersionNetwork')]",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('towerMasterHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"properties": {
				"securityRules": [{
					"name": "allowSSHin_all",
					"properties": {
						"description": "Allow SSH in from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPS_all",
					"properties": {
						"description": "Allow HTTPS connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 200,
						"direction": "Inbound"
					}
				}, {
					"name": "allowTowerConsoleIn_all",
					"properties": {
						"description": "Allow Tower Console connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "8443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 300,
						"direction": "Inbound"
					}
				}, {
					"name": "allowCockpitIn_all",
					"properties": {
						"description": "Allow Cockpit connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "9090",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 400,
						"direction": "Inbound"
					}
				}]
			}
		}, {
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('virtualNetworkName')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "VirtualNetwork"
			},
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"subnets": [{
					"name": "[variables('masterSubnetName')]",
					"properties": {
						"addressPrefix": "[variables('masterSubnetPrefix')]"
					}
				}]
			}
		}, {
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('newStorageAccountMaster')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionStorage')]",
			"tags": {
				"displayName": "StorageAccounts"
			},
			"properties": {
				"accountType": "[variables('vmSizesMap')[parameters('masterVmSize')].storageAccountType]"
			}
		}, {
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[parameters('towerMasterPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "TowerMasterPublicIP"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[parameters('towerMasterPublicIpDnsLabel')]"
				}
			}
		}, {
			"type": "Microsoft.Compute/availabilitySets",
			"name": "masteravailabilityset",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"properties": {}
		}, {
			"type": "Microsoft.Network/loadBalancers",
			"name": "[variables('masterLoadBalancerName')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "TowerMasterLB"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', parameters('towerMasterPublicIpDnsLabel'))]"
			],
			"properties": {
				"frontendIPConfigurations": [{
					"name": "LoadBalancerFrontEnd",
					"properties": {
						"publicIPAddress": {
							"id": "[variables('masterPublicIpAddressId')]"
						}
					}
				}],
				"backendAddressPools": [{
					"name": "loadBalancerBackEnd"
				}],
				"loadBalancingRules": [{
					"name": "TowerAdminConsole",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[variables('masterLbFrontEndConfigId')]"
						},
						"backendAddressPool": {
							"id": "[variables('masterLbBackendPoolId')]"
						},
						"protocol": "Tcp",
						"frontendPort": 8443,
						"backendPort": 8443,
						"probe": {
							"id": "[variables('masterLb8443ProbeId')]"
						}
					}
				}, {
					"name": "CockpitConsole",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[variables('masterLbFrontEndConfigId')]"
						},
						"backendAddressPool": {
							"id": "[variables('masterLbBackendPoolId')]"
						},
						"protocol": "Tcp",
						"frontendPort": 9090,
						"backendPort": 9090,
						"probe": {
							"id": "[variables('masterLbCockpitProbeId')]"
						}
					}
				}],
				"probes": [{
					"name": "8443Probe",
					"properties": {
						"protocol": "Tcp",
						"port": 8443,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					}
				}, {
					"name": "cockpitProbe",
					"properties": {
						"protocol": "Tcp",
						"port": 9090,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					}
				}]
			}
		},	
		{
			"apiVersion": "[variables('apiVersionNetwork')]",
			"type": "Microsoft.Network/loadBalancers/inboundNatRules",
			"name": "[concat(variables('masterLoadBalancerName'), '/', 'SSH-', variables('towerMasterHostname'), copyIndex())]",
			"location": "[variables('location')]",
			"copy": {
				"name": "masterLbLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"dependsOn": [
				"[variables('masterLbId')]"
			],
			"properties": {
				"frontendIPConfiguration": {
					"id": "[variables('masterLbFrontEndConfigId')]"
				},
				"protocol": "tcp",
				"frontendPort": "[copyIndex(2200)]",
				"backendPort": 22,
				"enableFloatingIP": false
			}
		}, {
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('towerMasterHostname'), copyIndex(), 'nic')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "TowerMasterNetworkInterface"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/loadBalancers/', variables('masterLoadBalancerName'))]",
				"[concat(variables('masterLbId'), '/inboundNatRules/SSH-', variables('towerMasterHostname') ,copyIndex())]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('towerNodeHostname'), '-nsg')]"
			],
			"copy": {
				"name": "masterNicLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('towerMasterHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('masterSubnetName'))]"
						},
						"loadBalancerBackendAddressPools": [{
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('masterLoadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
						}],
						"loadBalancerInboundNatRules": [
							{
								"id": "[concat(variables('masterLbId'),'/inboundNatRules/SSH-', variables('towerMasterHostname'), copyIndex())]"
							}
						]
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('towerMasterHostname'), '-nsg'))]"
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(variables('towerMasterHostname'), '-', copyIndex())]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "TowerMasterVirtualMachines"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster'))]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('towerMasterHostname'), copyIndex(), 'nic')]"
			],
			"copy": {
				"name": "masterVmLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', 'masteravailabilityset')]"
				},
				"hardwareProfile": {
					"vmSize": "[parameters('masterVmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('towerMasterHostname'), '-', copyIndex())]",
					"adminUsername": "[parameters('adminUsername')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": true,
						"ssh": {
							"publicKeys": [{
								"path": "[variables('sshKeyPath')]",
								"keyData": "[parameters('sshPublicKey')]"
							}]
						}
					}
				},
				"storageProfile": {
					"imageReference": "[variables('imageReference')]",
					"osDisk": {
						"name": "[concat(variables('towerMasterHostname'), copyIndex(), 'osdisk')]",
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('towerMasterHostname'), copyIndex(), '.vhd')]"
						},
						"caching": "ReadWrite",
						"createOption": "FromImage"
					},
					"dataDisks": [{
						"name": "[concat(variables('towerMasterHostname'), copyIndex(), '-docker-pool')]",
						"diskSizeGB": "[parameters('dataDiskSize')]",
						"lun": 0,
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('towerMasterHostname'), copyIndex(), '-docker-pool.vhd')]"
						},
						"createOption": "Empty"
					}]
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('towerMasterHostname'), copyIndex(), 'nic'))]"
					}]
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('towerMasterHostname'), '-', copyIndex(), '/deployTower')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "PrepMaster"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', variables('towerMasterHostname'), '-', copyIndex())]"
			],
			"copy": {
				"name": "towerPrepLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('towerPrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('towerPrepScriptFileName'), ' ', parameters('cloudAccessUsername'), ' ', variables('singlequote'), parameters('cloudAccessPassword'), variables('singlequote'), ' ', parameters('cloudAccessPoolId'))]"
				}
			}
		}, {
			"name": "TowerDeployment",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"towerPrepLoop",
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('towerDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"towerMasterHostname": {
						"value": "[variables('towerMasterHostname')]"
					},
					"towerMasterPublicIpFqdn": {
						"value": "[reference(parameters('towerMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"towerMasterPublicIpAddress": {
						"value": "[reference(parameters('towerMasterPublicIpDnsLabel')).ipAddress]"
					},
					"masterInstanceCount": {
						"value": "[parameters('masterInstanceCount')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"towerPassword": {
						"value": "[parameters('towerPassword')]"
					},
					"xipioDomain": {
						"value": "[concat(reference(parameters('infraLbPublicIpDnsLabel')).ipAddress, '.xip.io')]"
					},
					"customDomain": {
						"value": "[parameters('defaultSubDomain')]"
					},
					"subDomainChosen": {
						"value": "[concat(parameters('defaultSubDomainType'), 'Domain')]"
					},
					"sshPrivateKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "[parameters('keyVaultSecret')]"
						}
					}
				}
			}
		}
	],
	"outputs": {
		"towerConsoleUrl": {
			"type": "string",
			"value": "[concat('https://', reference(parameters('towerMasterPublicIpDnsLabel')).dnsSettings.fqdn, ':8443/console')]"
		},
		"towerMasterSsh": {
			"type": "string",
			"value": "[concat('ssh ', parameters('adminUsername'), '@', reference(parameters('towerMasterPublicIpDnsLabel')).dnsSettings.fqdn, ':2200')]"
		},
		"towerInfraLoadBalancerFQDN": {
			"type": "string",
			"value": "[reference(parameters('infraLbPublicIpDnsLabel')).dnsSettings.fqdn]"
		}
	}
}
